#!/bin/busybox sh
#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# Last updated 2009/07/18
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

if [ -n "$DEBUG" ]; then
	LOG=/tmp/log
	set -x
else
	LOG=/dev/null
	[ -e $LOG ] || busybox mknod $LOG c 1 3
fi
exec 2> $LOG

busybox mount -t proc proc /proc
busybox mount -t sysfs sys /sys

busybox --install -s

export PATH=$PATH:/system/bin

if [ -n "$DEBUG" ]; then
	mknod /dev/tty2 c 4 2 && openvt
	mknod /dev/tty3 c 4 3 && openvt
fi

echo -n Detecting Android...

while [ 1 ]; do
	mdev -s

	for device in /dev/sr* /dev/sd[a-z]*; do
		mount $device /mnt || continue
		cd /mnt/$SRC
		if [ ! -e ramdisk.img -o ! -e system.img ]; then
			umount /mnt
			continue
		fi
		mount -t tmpfs tmpfs /android
		cd /android
		zcat /mnt/$SRC/ramdisk.img | cpio -id > /dev/null
		mount -o loop,rw /mnt/$SRC/system.img /sfs
		if [ -e /sfs/etc/mountd.conf ]; then
			if [ -n "$SDCARD" ]; then
				if [ -b $SDCARD ]; then
					sed -i "s|\(^ *block_device *\)\(/dev/.*\)|\1$SDCARD|g" /sfs/etc/mountd.conf
					sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=mounted/g' /sfs/build.prop
				elif [ -b /dev/$SDCARD ]; then
					SDCARD=`echo $SDCARD | sed -e 's|^/\(.*\)|\1|g'`
					sed -i "s|\(^ *block_device *\)\(/dev/.*\)|\1/dev/$SDCARD|g" /sfs/etc/mountd.conf
					sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=mounted/g' /sfs/build.prop
				else
					SDCARD=`echo $SDCARD | sed -e 's|^/\(.*\)|\1|g'`
					# reset the mount status, mountd will set it when the external storage is added
					sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=unmounted/g' /sfs/build.prop
					_sdcard=1
					sed -i "s|\(^ *block_device *\)\(/dev/.*\)|\1/dev/$SDCARD|g" /sfs/etc/mountd.conf
				fi
			else
				# clean up the mountd.conf to always mount from tmpfs
				sed -i "s|\(^ *block_device *\)\(/dev/.*\)|\1/dev/SDCARD|g" /sfs/etc/mountd.conf
				sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=mounted/g' /sfs/build.prop
			fi
		elif [ -e /sfs/build.prop ]; then
			sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=mounted/g' /sfs/build.prop
		fi
		umount /sfs
		mount -o loop,ro /mnt/$SRC/system.img /sfs
		if [ -e /sfs/system.img ]; then
			mount -o loop,rw /sfs/system.img system
			if [ -e system/etc/mountd.conf ]; then
				if [ -n "$SDCARD" ] ; then
					if [ -b $SDCARD ]; then
						sed -i "s|\(^ *block_device *\)\(/dev/.*\)|\1$SDCARD|g" /system/etc/mountd.conf
						sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=mounted/g' /system/build.prop
					elif [ -b /dev/$SDCARD ]; then
						SDCARD=`echo $SDCARD | sed -e 's|^/\(.*\)|\1|g'`
						sed -i "s|\(^ *block_device *\)\(/dev/.*\)|\1/dev/$SDCARD|g" /sfs/etc/mountd.conf
						sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=mounted/g' /system/build.prop
					else
						SDCARD=`echo $SDCARD | sed -e 's|^/\(.*\)|\1|g'`
						# reset the mount status, mountd will set it when the external storage is added
						sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=unmounted/g' /system/build.prop
						_sdcard=1
						sed -i "s|\(^ *block_device *\)\(/dev/.*\)|\1/dev/$SDCARD|g" /system/etc/mountd.conf
					fi
				else
					# clean up the mountd.conf to always mount from tmpfs
					sed -i "s|\(^ *block_device *\)\(/dev/.*\)|\1/dev/SDCARD|g" /system/etc/mountd.conf
					sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=mounted/g' /system/build.prop
				fi
			elif [ -e system/build.prop ]; then
				sed -i 's/^EXTERNAL_STORAGE_STATE=.*$/EXTERNAL_STORAGE_STATE=mounted/g' /system/build.prop
			fi
			umount system
			mount -o loop,ro /sfs/system.img system
		else
			mount --move /sfs system
		fi
		mkdir cache sdcard
		mount -t tmpfs tmpfs cache
		echo " found at $device"
		break
	done
	mountpoint -q /android && break
	sleep 1
	echo -n .
	if [ -n "$DEBUG" ]; then
		echo -e "\nType 'exit' to continue booting...\n"
		sh
	fi
done

ln -s android/system /

ln -s ../system/lib/modules /lib

if [ -b "$DATA" ]; then
	mount $DATA data
elif [ -b "/dev/$DATA" ]; then
	mount /dev/$DATA data
elif [ -d /mnt/$SRC/data ]; then
	mount --bind /mnt/$SRC/data data
else
	mount -t tmpfs tmpfs data
fi
if [ -z "$_sdcard"  ]; then
	if [ -b "$SDCARD" ]; then
		mount $SDCARD sdcard
	elif [ -b "/dev/$SDCARD" ]; then
		mount /dev/$SDCARD sdcard
	else
		if [ -d /mnt/$SRC/sdcard ]; then
			mount --bind /mnt/$SRC/sdcard sdcard
		else
			mount -t tmpfs tmpfs sdcard
		fi
	fi
fi

# load scripts
for s in `ls /scripts/* /mnt/$SRC/scripts/*`; do
	source $s
done

load_modules

[ -n "$INSTALL" ] && install_hd

if [ -n "$DEBUG" ]; then
	echo -e "\nUse Alt-F1/F2/F3 to switch between virtual consoles"
	echo -e "Type 'exit' to enter Android...\n"

	# FIXME: all error messages in the shell are sent to $LOG
	sh
	chroot /android /init
else
	exec switch_root /android /init
fi

sh # aviod kernel panic
